@page "/room/{id}/booking"
@attribute [Authorize]
@inject NavigationManager NavManager
@inject IRoomService RoomService
@inject IBookingService BookingService
@inject ILogger<CreateBooking> Logger
@inject IUserService UserService

@if(_loading)
{
    <div class="spinner"></div>
}
else
{
    @if(_room == null)
    {
        <p>Room with id @Id does not exist</p>
    }
    else
    {
        <div class="form-group row">
                <label for="roomNr" class="col-sm-2 col-form-label">
                    Room nr
                </label>
                <div class="col-sm-10">
                    <p>@_room.RoomNr</p>
                </div>
            </div>
            <div class="form-group row">
                <label for="roomNr" class="col-sm-2 col-form-label">
                    Capacity
                </label>
                <div class="col-sm-10">
                    <p>@_room.Capacity</p>
                </div>
            </div>
            <div class="form-group row">
                <label for="roomNr" class="col-sm-2 col-form-label">
                    Price (€)
                </label>
                <div class="col-sm-10">
                    <p>@_room.Price</p>
                </div>
            </div>
        <EditForm Model="_booking" OnValidSubmit="BookRoom">
            <ObjectGraphDataAnnotationsValidator/>
            <ValidationSummary />
            <div class="form-group row">
            <label for="checkIn" class="col-sm-2 col-form-label">
                Check in
            </label>
            <div class="col-sm-10">
                <InputDate id="checkIn" class="form-control" @bind-Value="_booking.CheckIn" disabled="true"/>
            </div>
            </div>
            <div class="form-group row">
                <label for="checkOut" class="col-sm-2 col-form-label">
                    Check in
                </label>
                <div class="col-sm-10">
                    <InputDate id="checkOut" class="form-control" @bind-Value="_booking.CheckOut" disabled="true"/>
                </div>
            </div>
            <div class="form-group row">
                <label for="firstName" class="col-sm-2 col-form-label">
                    First Name
                </label>
                <div class="col-sm-10">
                    <InputText id="firstName" class="form-control" placeholder="First Name" @bind-Value="_booking.Guest.FirstName"/>
                </div>
            </div>
            <div class="form-group row">
                <label for="lastName" class="col-sm-2 col-form-label">
                    Last Name
                </label>
                <div class="col-sm-10">
                    <InputText id="lastName" class="form-control" placeholder="Last Name" @bind-Value="_booking.Guest.LastName"/>
                </div>
            </div>
            <div class="form-group row">
                <label for="personalCode" class="col-sm-2 col-form-label">
                    Personal code
                </label>
                <div class="col-sm-10">
                    <InputNumber id="personalCode" class="form-control" placeholder="Personal code" @bind-Value="_booking.Guest.PersonalCode"/>
                </div>
            </div>
            <div class="form-group row">
                <label for="email" class="col-sm-2 col-form-label">
                    Email
                </label>
                <div class="col-sm-10">
                    <InputText id="email" class="form-control" @bind-Value="_booking.Guest.Email" disabled="true"/>
                </div>
            </div>
            <button class="btn btn-primary" type="submit">Book</button>
        </EditForm>
    }
}

@code{
    
    [Parameter]
    public string Id { get; set; } = default!;
    [Parameter]
    [SupplyParameterFromQuery(Name = "checkIn")]
    public string CheckIn { get; set; } = default!;
    [Parameter]
    [SupplyParameterFromQuery(Name = "checkOut")]
    public string CheckOut { get; set; } = default!;
    private CreateBookingModel _booking = new CreateBookingModel();
    private RoomModel? _room;
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        await InitCreationData();
        await base.OnInitializedAsync();
    }

    private async Task InitCreationData()
    {
        try
        {
            _loading = true;

            if (Guid.TryParse(Id, out var roomId))
                _room = await RoomService.GetRoomAsync(roomId);

            if (_room != null)
            {
                var email = UserService.GetUsername();
                _booking.CheckIn = DateTime.Parse(CheckIn);
                _booking.CheckOut = DateTime.Parse(CheckOut);
                _booking.RoomId = _room!.Id;
                _booking.Guest = new Guest(string.Empty, string.Empty, email);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message, ex);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task BookRoom()
    {
        try
        {
            await BookingService.BookRoomAsync(Guid.Parse(Id), _booking!);
            NavManager.NavigateTo("/mybookings");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message, ex);
        }
    }
}

